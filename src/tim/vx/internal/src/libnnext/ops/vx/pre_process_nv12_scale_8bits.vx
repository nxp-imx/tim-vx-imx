#include "cl_viv_vx_ext.h"

_viv_uniform int bOrder;
_viv_uniform int rOrder;

_viv_uniform float outputScaleVar;
_viv_uniform float bMeanScaleVarZp;
_viv_uniform float gMeanScaleVarZp;
_viv_uniform float rMeanScaleVarZp;

_viv_uniform uint  xrIntFloat_16;
_viv_uniform uint  yrIntFloat_16;

_viv_uniform VXC_512Bits uniConvertNV12toB_4x4;
_viv_uniform VXC_512Bits uniConvertNV12toG_4x4;
_viv_uniform VXC_512Bits uniConvertNV12toR_4x4;

_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;
_viv_uniform VXC_512Bits uniConvertUVtoCharSub128_2x8;
_viv_uniform VXC_512Bits uniExtractUVtoCharSub128_2x8;

__kernel void pre_process_nv12_scale_U8toU8(
    __read_only image2d_t y_img, __read_only image2d_t uv_img,
    __write_only image2d_array_t    output,
    global int *xRatio, global int * yRatio, global int * xOffset, global int * yOffset,
    float rMean, float gMean, float bMean, float var, int reverse_channel, int trans)
{
    uint4 gidx = get_global_id(0);
    uint gidy = get_global_id(1);
    gidx += (uint4)(0, 1, 2, 3);

    uint dy = (gidy * yrIntFloat_16) >> 16;
    uint4 dx = (gidx * xrIntFloat_16) >> 16;
    int sy = convert_int(dy) + (*yOffset);
    int4 sx = convert_int4(dx) + (*xOffset);
    int4 uvX = sx & 0xfffffffe;
    int uvY = sy >> 1;

    vxc_uchar16 Y, UV;
    int2 coord = (int2)(sx.x, sy);
    int2 coord_uv = (int2)(uvX.x, uvY);

    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.y;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.z;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.w;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.y;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(2, 3, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.z;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(4, 5, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.w;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(6, 7, 0, VXC_RM_TowardZero, 0));

    vxc_char16 tmpUV;
    short tmpVal = 128;
    VXC_DP2x8(tmpUV, UV, tmpVal, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertUVtoCharSub128_2x8);

    float4 tmpDstB, tmpDstG, tmpDstR;
    VXC_DP4x4(tmpDstB, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toB_4x4);
    VXC_DP4x4(tmpDstG, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toG_4x4);
    VXC_DP4x4(tmpDstR, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toR_4x4);

    int4 result;
    vxc_uchar8 dst;
    int4 dstPos = (int4)(get_global_id(0), gidy, 0, 0);
    result = convert_int4_rte(tmpDstB * outputScaleVar + bMeanScaleVarZp);
    dstPos.z = bOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstG * outputScaleVar + gMeanScaleVarZp);
    dstPos.z = 1;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstR * outputScaleVar + rMeanScaleVarZp);
    dstPos.z = rOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void pre_process_nv12_copy_U8toU8(
    __read_only image2d_t y_img, __read_only image2d_t uv_img,
    __write_only image2d_array_t    output,
    global int *xRatio, global int * yRatio, global int * xOffset, global int * yOffset,
    float rMean, float gMean, float bMean, float var, int reverse_channel, int trans)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);

    int sy = gidy + (*yOffset);
    int sx = gidx + (*xOffset);
    int uvX = sx & 0xfffffffe;
    int uvY = sy >> 1;

    vxc_uchar16 Y, UV;

    VXC_ReadImage(Y, y_img, (int2)(sx,sy), VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(UV, uv_img,(int2)(uvX,uvY), VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    vxc_char16 tmpUV;
    short tmpVal = 128;
    VXC_DP2x8(tmpUV, UV, tmpVal, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractUVtoCharSub128_2x8);

    float4 tmpDstB, tmpDstG, tmpDstR;
    VXC_DP4x4(tmpDstB, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toB_4x4);
    VXC_DP4x4(tmpDstG, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toG_4x4);
    VXC_DP4x4(tmpDstR, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toR_4x4);

    int4 result;
    vxc_uchar8 dst;
    int4 dstPos = (int4)(get_global_id(0), gidy, 0, 0);
    result = convert_int4_rte(tmpDstB * outputScaleVar + bMeanScaleVarZp);
    dstPos.z = bOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstG * outputScaleVar + gMeanScaleVarZp);
    dstPos.z = 1;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstR * outputScaleVar + rMeanScaleVarZp);
    dstPos.z = rOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void pre_process_nv12_scale_U8toI8(
    __read_only image2d_t y_img, __read_only image2d_t uv_img,
    __write_only image2d_array_t    output,
    global int *xRatio, global int * yRatio, global int * xOffset, global int * yOffset,
    float rMean, float gMean, float bMean, float var, int reverse_channel, int trans)
{
    uint4 gidx = get_global_id(0);
    uint gidy = get_global_id(1);
    gidx += (uint4)(0, 1, 2, 3);

    uint dy = (gidy * yrIntFloat_16) >> 16;
    uint4 dx = (gidx * xrIntFloat_16) >> 16;
    int sy = convert_int(dy) + (*yOffset);
    int4 sx = convert_int4(dx) + (*xOffset);
    int4 uvX = sx & 0xfffffffe;
    int uvY = sy >> 1;

    vxc_uchar16 Y, UV;
    int2 coord = (int2)(sx.x, sy);
    int2 coord_uv = (int2)(uvX.x, uvY);

    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.y;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.z;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord.x = sx.w;
    VXC_ReadImage(Y, y_img, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.y;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(2, 3, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.z;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(4, 5, 0, VXC_RM_TowardZero, 0));
    coord_uv.x = uvX.w;
    VXC_ReadImage(UV, uv_img,coord_uv, VXC_5BITOFFSET_XY(0,0),VXC_MODIFIER(6, 7, 0, VXC_RM_TowardZero, 0));

    vxc_char16 tmpUV;
    short tmpVal = 128;
    VXC_DP2x8(tmpUV, UV, tmpVal, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertUVtoCharSub128_2x8);

    float4 tmpDstB, tmpDstG, tmpDstR;
    VXC_DP4x4(tmpDstB, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toB_4x4);
    VXC_DP4x4(tmpDstG, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toG_4x4);
    VXC_DP4x4(tmpDstR, Y, tmpUV, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertNV12toR_4x4);

    int4 result;
    vxc_char8 dst;
    int4 dstPos = (int4)(get_global_id(0), gidy, 0, 0);
    result = convert_int4_rte(tmpDstB * outputScaleVar + bMeanScaleVarZp);
    dstPos.z = bOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstG * outputScaleVar + gMeanScaleVarZp);
    dstPos.z = 1;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

    result = convert_int4_rte(tmpDstR * outputScaleVar + rMeanScaleVarZp);
    dstPos.z = rOrder;
    VXC_DP2x8(dst, result, result, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertInt32toUint8_2x8);
    VXC_WriteImage2DArray(output, dstPos, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}